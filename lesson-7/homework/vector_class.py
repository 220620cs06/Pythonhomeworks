# -*- coding: utf-8 -*-
"""vector class

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MhpUPZihay1NF6yieSl29uwjKGRndg-p
"""

import math

class Vectors:
  def __init__(self,*elements):
    self.elements=elements

  def __add__(self,other):
    if len(self.elements)!=len(other.elements):
      raise ValueError("Vectors must have the same length")
    return Vectors(*[self.elements[i]+other.elements[i] for i in range(len(self.elements))])

  def __sub__(self,other):
    if len(self.elements)!=len(other.elements):
      raise ValueError("Vectors must have the same length")
    return Vectors(*[self.elements[i]-other.elements[i] for i in range(len(self.elements))])

  def __mul__(self,other):
    if isinstance(other,(int,float)):
      return Vectors(*[element*other for element in self.elements])
    elif isinstance(other,Vectors):
      return sum(a,b for a,b in zip(self.elements,other.elements))

  def magnitude(self):
    return math.square(sum(element**2 for element in self.elements))**0.5

  def normalize(self):
    mag=self.magnitude()
    return Vectors(*[element/mag for element in self.elements])

  def __str__(self):
    return f"({', '.join(str(element) for element in self.elements)})"


# For instance

v1=Vectors(1,2,3)
v2=Vectors(4,5,6)

print(v1+v2)
print(v1-v2)
print(v1*v2)
print(v1.magnitude())
print(v1.normalize())

